#!/usr/bin/python3#    Data analysis tools for X-ray diffraction data obtained at#    the KMC-3 XPP endstation of BESSY II.#    Copyright (C) 2022 Matthias Roessle and Florin Boariu.##    This program is free software: you can redistribute it and/or modify#    it under the terms of the GNU General Public License as published by#    the Free Software Foundation, either version 3 of the License, or#    (at your option) any later version.##    This program is distributed in the hope that it will be useful,#    but WITHOUT ANY WARRANTY; without even the implied warranty of#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the#    GNU General Public License for more details.##    You should have received a copy of the GNU General Public License#    along with this program.  If not, see <http://www.gnu.org/licenses/>.import os, reimport xrayutilities as xuimport numpy as npimport matplotlib.pyplot as pltimport tqdmfrom pathlib import Pathimport numpy as npimport matplotlib.pyplot as plt                def getQData(h5File, scanNr, tauOffset = 300.4):    '''Read an h5 file after converting the measured Pilatus images into a q_x -- q_z grid.    args        h5File          name of the h5 file to load        scanNr          number of the scan to extract from the file        tauOffset       offset value of tau_APD    returns        dictionary with q_x, q_y, q_z, delay, temperature, grid of q vectors, and measured intensity         '''    import h5py    h5File             = h5File    h5Data             = h5py.File(h5File, 'r')    # get key (aka spec filename) of the HDF5 file    specNameKey        = list(h5Data.keys())[0]        FileNameQx         = specNameKey + '/scan_' + str(scanNr) + '/ReducedData/IntQx'    FileNameQy         = specNameKey + '/scan_' + str(scanNr) + '/ReducedData/IntQy'    FileNameQz         = specNameKey + '/scan_' + str(scanNr) + '/ReducedData/IntQz'    FileNameGrid       = specNameKey + '/scan_' + str(scanNr) + '/ReducedData/grid'    FileNameIntensity  = specNameKey + '/scan_' + str(scanNr) + '/ReducedData/QMapData'    FileNameQx_X       = specNameKey + '/scan_' + str(scanNr) + '/ReducedData/qx'    FileNameQx_Y       = specNameKey + '/scan_' + str(scanNr) + '/ReducedData/qy'    FileNameQx_Z       = specNameKey + '/scan_' + str(scanNr) + '/ReducedData/qz'    SpecData           = specNameKey + '/scan_' + str(scanNr) + '/data'        qx_X               = h5Data[FileNameQx_X]    qy_X               = h5Data[FileNameQx_Y]    qz_X               = h5Data[FileNameQx_Z]    qx                 = h5Data[FileNameQx]    qy                 = h5Data[FileNameQy]    qz                 = h5Data[FileNameQz]    Intensity          = h5Data[FileNameIntensity]    grid               = h5Data[FileNameGrid]                Temp               = np.mean(h5Data[SpecData]['ls_t1'][0])    tauOffset          = tauOffset    delayMeas          = -np.mean(h5Data[SpecData]['PH_average'][1:]) + tauOffset # measured delay value corrected for tau_apd_0    delaySet           = 2 #h5Data[SpecData]['delay'][1]  # set delay     xQzVec             = qz_X    yQzVec             = qz    xQyVec             = qy_X    yQyVec             = qy    xQxVec             = qx_X    yQxVec             = qx    return {'xQx':xQxVec, 'yQx':yQxVec, 'xQy':xQyVec, 'yQy':yQyVec, 'xQz':xQzVec, 'yQz':yQzVec, 'delayMeas':delayMeas, 'delaySet':delaySet, 'Temperature':Temp, 'qGrid':grid, 'Intensity':Intensity} def prepareSpecFile(specFileName, path = Path.cwd(), norm = 'none'):    '''Load and convert KMC3 SPEC file to a .h5 file with the same name.    args        path            path to spec file, standard is the current working directory        specFileName    name of the spec file        norm            normalisation (none, time, absorber, ring current, sb current)    returns        nothing, just generates the h5 file.    '''    specFileName = os.path.splitext(specFileName)[0]    specFile               = specFileName + '.spec'    specFileH5             = specFileName + '_xu.h5'    # convert the specified spec file into a parsable and more importantly iterable HDF5 file    if os.path.isfile(specFileH5):        # check if .h5 file already exists        print()        print(specFileH5 + ' already exists')        print()        specFileOrig       = xu.io.SPECFile(specFile)        specFileOrig.Update()        specFileOrig.Save2HDF5(specFileH5)    else:        # otherwise generate .h5 file from spec file        specFileOrig       = xu.io.SPECFile(specFile)        specFileOrig.Save2HDF5(specFileH5)        print()        print(specFileH5 + ' generated.')        print()def getInitMopo(specFile, scan, motor):    import xrayutilities as xu    specFile = xu.io.SPECFile(specFile)    scan = specFile.__getattr__("scan%d" % scan)    scan.ReadData()    scanData = scan.data    value = scan.init_motor_pos['INIT_MOPO_' + motor]    print('initial value of motor {} is {}'.format(motor, value))    return value       def getSpecScan(specFileName, scanNr, motor = 'Theta', counter = 'pilatus_sum'):    '''Plot spec scan'''    import xrayutilities as xu    import matplotlib.pyplot as plt    import numpy as np        specFile = xu.io.SPECFile(specFileName)    scan = specFile.__getattr__("scan%d" % scanNr)    scan.ReadData()    scanData = scan.data    return scanData[motor], scanData[counter]                def plotSpecScan(specFileName, scanNr, motor = 'Theta', counter = 'pilatus_sum', plotScale = 'lin', saveOutput = 'False'):    '''Plot spec scan'''    import xrayutilities as xu    import matplotlib.pyplot as plt    import numpy as np        specFile = xu.io.SPECFile(specFileName)    scan = specFile.__getattr__("scan%d" % scanNr)    scan.ReadData()    scanData = scan.data        plt.figure('SPEC scan #{}'.format(scanNr))    plt.xlabel(motor, fontsize = 14)    plt.ylabel(counter, fontsize = 14)    if plotScale == 'lin':        plt.plot(scanData[motor], scanData[counter], '-o')    if plotScale == 'log':        plt.semilogy(scanData[motor], scanData[counter], '-o')    plt.show()        if saveOutput == 'True':        import os        specFileName = os.path.splitext(str(specFileName))[0]        np.savetxt(str(specFileName) + '_scan' + str(scanNr) + '.dat', np.transpose(np.vstack((scanData[motor], scanData[counter]))), fmt = '%2.5e')        plt.savefig(str(specFileName) + '_scan' + str(scanNr) + '.pdf')def getMonitor(specFile, scan, counter = 'RingCurrent'):    '''get monitor counter from spec file for scan    '''    import xrayutilities as xu    specFileXU = specFile + '_xu.h5'    monitor = xu.io.geth5_scan(specFileXU, scan)[counter]    return monitor    